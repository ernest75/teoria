Kotlin buscar definicions de extensiones, lambdas, scoped functions, inline functions, generics

 - Funciones de esxtension : És una funció que afegeix funcionalitat a una clase. Es una funció membre de la clase definida fora de la clase. Et permeten extendre funcionalitat d'una altre clase sense tocar el seu codi original. ex: Imageview.loadUrl(glide or whatever), startactivty through intent

 - Lambdas : is a function which has no name. Lambda is defined with a curly braces {} which takes variable as a parameter (if any) and body of function. The body of function is written after variable (if any) followed by -> operator. Es una funcio inmediata.

 Scoped functions : functions whose sole purpose is to execute a block of code within the context of an object. When you call such a function on an object with a lambda expression provided, it forms a temporary scope. In this scope, you can access the object without its name. Such functions are called scope functions. There are five of them: let, run, with, apply, and also.

 let, run, and with return the lambda result.

 	Let : It recives a function that will recive the object as a parameter and returns the value that this function returns.wherein the variables declared inside the expression cannot be used outside.
 	The context object is available as an argument (it ). The return value is the lambda result. let can be used to invoke one or more functions on results of call chains. 

 		Ex: val numbers = mutableListOf("one", "two", "three", "four", "five")
			numbers.map { it.length }.filter { it > 3 }.let { 
    		println(it)
    		// and more function calls if needed
		} 

		let is often used for executing a code block only with non-null values.To perform actions on a non-null object, use the safe call operator ?. on it and call let with the actions in its lambda.To perform actions on a non-null object, use the safe call operator ?. on it and call let with the actions in its lambda.

		val str: String? = "Hello"   
		//processNonNullString(str)       // compilation error: str can be null
		val length = str?.let { 
    	println("let() called on $it")        
    	processNonNullString(it)      // OK: 'it' is not null inside '?.let { }'
    	it.length
}

	With : rep un objecte y una funció que sera executada com a extension funcion. Aplicar varies modificacions sobre un mateix objecte. with can be read as “ with this object, do the following.”

		Ex: data class Person(var name: String, var tutorial : String)
			var person = Person("Anupam", "Kotlin")

			with(person){
       			name = "No Name"
        		tutorial = "Kotlin tutorials"
    		 }	

 	Run :  is similar to the “let” operator in terms of accepting a return value that is different from the object on which the scope function is being applied to. Hence, a “run” operator can be used to initialize an object and return the result of it. Is implemented as an extension function. Makes the context object available as a receiver and returns the function result.
 	The context object is available as a receiver (this ). The return value is the lambda result. run does the same as with but invokes as let- as an extension function of the context object.Run is useful when your lambda contains both the object initialization and the computation of the return value.

 	Es com fer un let pero no has de fer servir it.property, pots accedir a la property directament.
 		
 		Ex: Person().run {
        name = "Asdf"
        contactNumber = "0987654321"
        return@run "The details of the Person is: ${displayInfo()}"
    	}

    	// compute result as block result
		val result = run {
    		val x = 5
    		val y = x + 3
    		y - 4
		}

		// compute result with receiver
		val result2 = "text".run {
    	val tail = substring(1)
    	tail.toUpperCase()
		}	

	apply and also return the context object.

	Apply : The context object is available as a receiver (this ). The return value is the object itself. Use apply for code blocks that don't return a value and mainly operate on the members of the receiver object. The common case for apply is the object configuration. Such calls can be read as “ apply the following assignments to the object.”

		Ex:
			val adam = Person("Adam").apply {
    			age = 32
    			city = "London"        
			}
			println(adam)


	Also : The context object is available as an argument (it ). The return value is the object itself. also is good for performing some actions that take the context object as an argument. Use also for actions that need a reference rather to the object than to its properties and functions, or when you don't want to shadow this reference from an outer scope.
	When you see also in the code, you can read it as “ and also do the following with the object.”

		Ex: val numbers = mutableListOf("one", "two", "three")
		numbers
    	.also { println("The list elements before adding new one: $it") }
    	.add("four")

    	https://kotlinlang.org/docs/scope-functions.html


  Generics : Consists of writhing code wihtout the need of specifiyng the exact object type this code is going to use.

  Inline : Save space, Al ser tot un objecte fa que tot ocupi espai de memoria , amb inline reduixes memoria perque el seu codi es copia en compilacio on es crida la funcio inlined 










