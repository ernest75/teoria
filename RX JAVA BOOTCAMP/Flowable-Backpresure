If an observer can handle only 1000 items per second,  but its Observable emits 100000 items per second, what will happen ?
Backpresure.

RxJava 2 introduced a new Observable class called Flllowable , specially prepared to work  with backpressure aware data  sources .

We can easily create a Flowable from any object or value using just operator . Like we did with for the Observable.

This is the simplest way. But, widely used approach to create a flowable  is toFlowable() method.

We can invoke any observables ‘s toFlowable method passing BackpressureStrategy as an argument.

Backpressure strategies

	- BackpressureStrategy.DROP : We use this to discard the events that cannot be consumed by the Observer.

	- BackpressureStrategy.BUFFER : If we use this, the source will buffer all the events until the subscriber can consume them. I recommend this strategy for most of the use cases, because there will be no data loss with this strategy.

	- BackpressureStrategy.LATEST : BackpressureStrategy.LATEST, force  to the source to keep only the latest items, to do that source may need to  overwrite some previous values .

	- BackpressureStrategy.MISSING : We may temporary  pass this value, if we don’t want any backpressure stratergy.

	- BackpressureStrategy.ERROR : If we don’t expect backpressure at all, we can pass BackpressureStrategy.ERROR

	In both of the cases( BackpressureStrategy.MISSING,  BackpressureStrategy.ERROR  ), a MissingBackpressureException will be thrown if the observer can’t keep up with the data emitting speed of the source. 