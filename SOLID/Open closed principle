Open Closed Principle (Ocp) : Software entities(classes, modules, functionns, etc...) should be open for extension, but closed for modification.

OCP (1988) : No implementation changes after classses released to clients , Should be possible to extend all classes

OCP (Uncle bob) : The answer is abstraction, a module can be extended by creating new derivates of the abstraction. In that manner you protect the client as he will be depending on the abstraction but you can also introduce new changes on the concretes immplementations of the abstraction.

When you are not sure that I'll need to support multiple alternative implementations, or I can't predict what changes will be required in the future, I should avoid introducing additional abstractions.

How to decide if whether to apply OCP or not : 

	1. Is the anticipated change related to intrinsic instability of business requirements? If it is prepare your code for that change.

	2. What kind of changes usually happen on projects like this one? 

	3. If the potential change doesn't corresppond to 1 or 2 don't apply OCP initially

	4. When requirements change, analyze the changes in code and identify opportunities for extraction of useful abstractions. Then refactor accordingly.






	